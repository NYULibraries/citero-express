// Generated by CoffeeScript 1.7.1
(function() {
  var Citero, Formats, java, root;

  java = require("java");

  java.classpath.push("" + __dirname + "/citero.jar");

  Formats = java["import"]("edu.nyu.library.citero.Formats");

  Citero = (function() {
    function Citero(data) {
      this.cite = java["import"]("edu.nyu.library.citero.Citero");
      this.cite = this.cite.mapSync(data);
      this;
    }

    Citero.map = function(data) {
      return new this(data);
    };

    Citero.prototype.from = function(format) {
      this.cite.fromSync(Formats.valueOfSync(format.toUpperCase()));
      return this;
    };

    Citero.prototype.to = function(format) {
      console.log(Formats.valueOfSync(format.toUpperCase()))
      return this.cite.toSync(Formats.valueOfSync(format.toUpperCase()));
    };

    Citero.toFormats = function() {
      var format, _i, _len, _ref;
      if (this.destinationFormats != null) {
        return this.destinationFormats;
      }
      this.destinationFormats = [];
      _ref = Formats.valuesSync();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        format = _ref[_i];
        if (format.isDestinationFormatSync()) {
          this.destinationFormats.push(format.nameSync());
        }
      }
      return this.destinationFormats;
    };

    Citero.fromFormats = function() {
      var format, _i, _len, _ref;
      if (this.sourceFormats != null) {
        return this.sourceFormats;
      }
      this.sourceFormats = [];
      _ref = Formats.valuesSync();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        format = _ref[_i];
        if (format.isSourceFormatSync()) {
          this.sourceFormats.push(format.nameSync());
        }
      }
      return this.sourceFormats;
    };

    return Citero;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.Citero = Citero;

}).call(this);
